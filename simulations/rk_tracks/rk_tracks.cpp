// ROOT dependencies
#include "TCanvas.h"
#include "TFile.h"
#include "TH3F.h"
#include "TRandom3.h"
#include "TStyle.h"
#include "TTree.h"

// Dictionaries generated by ROOT
#include "../build/X17_dict.cxx"

// X17 dependencies
#include "Field.h"
#include "PadLayout.h"
#include "RK4.h"
#include "Track.h"
#include "X17Utilities.h"

using namespace X17::constants;

int rk_tracks()
{
    constexpr int n_tracks  =  10000;         // The number of tracks to be simulated by Runge-Kutta.
    constexpr double step   =  1E-13;          // The step of Runge-Kutta [s].

    // Loading the magnetic field.
    X17::Field<X17::Vector>* magfield = X17::LoadField("../../../data/elmag/VecB2.txt",{-20,-30,-30},{20,30,30},0.5);

    // Some necessary variables for simulating and saving track parameters.
    TTree* simulated_tracks = new TTree("rk_tracks","Runge-Kutta simulated tracks");
    TRandom3* rand = new TRandom3(0);

    X17::TrackRK current_track;
    
    simulated_tracks->Branch("track",&current_track);

    std::vector<TGraph2D*> track_graphs;

    // The loop for the track simulation.
    for (int i = 0; i < n_tracks; i++)
    {
        // if ((100 * i) % n_tracks == 0) std::cout << "Progress: " << 100*i/n_tracks << " \%\n";
        ReportProgress(i,n_tracks);

        // Generating random initial parameters.
        bool electron;
        X17::Vector origin,orientation;
        double kin_en;

        X17::GetRandomTrackParams(rand,electron,origin,orientation,kin_en);

        // The actual track simulation.
        X17::RK4<8>* track = GetTrackRK(*magfield,electron,step,kin_en,origin,orientation);
        track->Integrate();

        std::vector<X17::Matrix<8,1>> results = track->GetResults();
        std::vector<X17::RKPoint> points;

        using namespace X17::constants;
        for (auto r : results) points.emplace_back(m2cm * r.at(1,0), m2cm * r.at(2,0), m2cm * r.at(3,0), 1e+9 / c * r.at(0,0));

        current_track = X17::TrackRK(electron,points,origin,orientation,kin_en);
        simulated_tracks->Fill();

        if((100 * i) % n_tracks == 0) track_graphs.push_back(GetGraphRK(track));
    }

    // Plotting some of the tracks.
    double height = 8;
    using namespace X17::constants;
    TCanvas* c_tracks = new TCanvas("c_tracks","Example tracks");
    // A histogram for scalling of the axes.
    TH3F* scale = new TH3F("scale","Example tracks;x [cm];y [cm];z [cm]",1,xmin,xmax,1,-yhigh,yhigh,1,-height,height);
    scale->Draw("");
    gStyle->SetOptStat(0);
    scale->GetXaxis()->SetTitleOffset(1.5);
    scale->GetZaxis()->SetTitleOffset(1.5);
    for(auto g : track_graphs) 
    {
        g->SetLineColor(kRed);
        g->Draw("LINE same");
    }
    
    X17::DefaultLayout::GetDefaultLayout().DrawPads3D(height);
    
    TFile* outfile = new TFile("../../../data/rk_tracks/rk_tracks2.root","RECREATE");
    simulated_tracks->Write();
    c_tracks->Write();

    // Freeing memory.
    delete simulated_tracks;
    delete rand;
    delete c_tracks;
    delete scale;
    delete outfile;

    return 0;
}

int main()
{
    return rk_tracks();
}