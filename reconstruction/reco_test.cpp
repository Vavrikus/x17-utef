// C++ dependencies
#include <iostream>
#include <string>

// ROOT dependencies
#include "TFile.h"
#include "TTree.h"

// Dictionaries generated by ROOT
#include "../build/X17_dict.cxx"

// X17 dependencies
#include "RecoTasks.h"
#include "TrackLoop.h"

int main(int argc, char const *argv[])
{
    // Loading the magnetic field data.
    X17::Field<X17::Vector>* magfield = X17::LoadField("../../data/elmag/VecB2.txt",{-20,-30,-30},{20,30,30},0.5);

    // Loading the ionization electron drift map.
    TFile* map_input = new TFile("../../data/ion_map/sample_2.0/map.root");
    X17::Field<X17::MapPoint>* map = (X17::Field<X17::MapPoint>*)map_input->Get("map");

    // Loading file microscopic tracks one by one.
    X17::TrackMicro* track_Evf_100 = 0;
    TTree track_selection("track_selection","Track selection");
    track_selection.Branch("track_small",&track_Evf_100);
    
    std::string single_track_folder = "../../data/micro_tracks/grid_01/";

    // 8 MeV, min theta, min phi
    TFile* input = new TFile((single_track_folder + "tracks_small910.root").c_str());
    TTree* tracks910 = (TTree*)input->Get("tracks_small");
    tracks910->SetBranchAddress("track_small",&track_Evf_100);
    tracks910->GetEntry(1);
    track_selection.Fill();

    // 8 MeV, zero theta, zero phi
    TFile* input2 = new TFile((single_track_folder + "tracks_small1000.root").c_str());
    TTree* tracks1000 = (TTree*)input2->Get("tracks_small");
    tracks1000->SetBranchAddress("track_small",&track_Evf_100);
    tracks1000->GetEntry(4);
    // track_selection.Fill();

    // 3 MeV, zero theta, zero phi
    TFile* input3 = new TFile((single_track_folder + "tracks_small92.root").c_str());
    TTree* tracks92 = (TTree*)input3->Get("tracks_small");
    tracks92->SetBranchAddress("track_small",&track_Evf_100);
    tracks92->GetEntry(1);
    // track_selection.Fill();
    
    // TrackLoop for single microscopic track.
    TrackLoop* loop = new TrackLoop(*map,magfield);
    loop->make_track_plots = true;
    
    RecoPadsTask* t = new RecoPadsTask();
    loop->AddTask(t);
    loop->AddTask(new CircleAndRKFitTask(t));
    
    // Loading file with Runge-Kutta tracks.
    TFile* input_rk = new TFile("../../data/rk_tracks/rk_tracks_forward.root");
    TTree* rk_tracks = (TTree*)input_rk->Get("rk_tracks");
    // rk_tracks->Print();
    
    // TrackLoop for Runge-Kutta simulated tracks.
    TrackLoop* rk_loop = new TrackLoop(*map,magfield);
    // auto t2 = new CircleFitEnergyTask();
    // rk_loop->AddTask(t2);
    // rk_loop->AddTask(new PlotSelectionTask(t2));
    rk_loop->AddTask(new PlotForwardTask());
    
    // Processing.
    // TFile out_file("track_plots.root","RECREATE","Tracks from microscopic simulation");
    // loop->ProcessMulti(&track_selection);
    // out_file.Close();

    TFile out_file2("../../data/rk_tracks/rk_plots_forward.root","RECREATE","Tracks from Runge-Kutta simulation fit");
    rk_loop->ProcessRK(rk_tracks);
    out_file2.Close();
    
    return 0;
}